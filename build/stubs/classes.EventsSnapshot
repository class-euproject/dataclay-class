# dataClay header
# This is a Stub, to be used for the user client
from dataclay import dclayMethod, DataClayObject

# Imports required by the following class

# Definition of dataClay object class: EventsSnapshot
class EventsSnapshot(DataClayObject):

    @dclayMethod()
    def delete(self):
        self.objects_refs = list()
    @dclayMethod(return_='list<str>')
    def get_objects_refs(self):
        return self.objects_refs
    @dclayMethod() 
    def when_federated(self):
        import requests
        print("Calling when federated in EventsSnapshot")
        kb = DKB.get_by_alias("DKB")
        kb.add_events_snapshot(self)
        # TODO: trigger prediction via REST with alias specified for last EventsSnapshot
        APIHOST = 'https://192.168.7.40:31001'
        AUTH_KEY = '23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP'
        NAMESPACE = '_'
        BLOCKING = 'true'
        RESULT = 'true'
        TRIGGER = 'tp-trigger'
        url = APIHOST + '/api/v1/namespaces/' + NAMESPACE + '/triggers/' + TRIGGER
        user_pass = AUTH_KEY.split(':')
        alias = self.snap_alias
        response = requests.post(url, params={'blocking':BLOCKING, 'result':RESULT}, json={"ALIAS": str(alias)}, auth=(user_pass[0], user_pass[1]), verify=False)
    @dclayMethod(obj='anything', property_name='str', value='anything', beforeUpdate='str', afterUpdate='str')
    def __setUpdate__(self, obj, property_name, value, beforeUpdate, afterUpdate):
        if beforeUpdate is not None:
            getattr(self, beforeUpdate)(property_name, value)
        object.__setattr__(obj, "%s%s" % ("_dataclay_property_", property_name), value)
        if afterUpdate is not None:
            getattr(self, afterUpdate)(property_name, value)
    @dclayMethod()
    def when_unfederated(self):
        print("Calling when unfederated in EventsSnapshot")
        kb = DKB.get_by_alias("DKB")
        kb.remove_events_snapshot(self)
    @dclayMethod(alias='str')
    def __init__(self, alias):
        self.objects_refs = []
        self.snap_alias = alias
    @dclayMethod(object_alias="str")
    def add_object_refs(self, object_alias):
        self.objects_refs.append(object_alias)
    pass
# End of class definition
